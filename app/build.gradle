apply plugin: 'com.android.application'

println('------- rootProject.ext.isRelease ---------: ' + rootProject.ext.isRelease)
// 如果 Debug 编译时，就不添加 plugin
if (rootProject.ext.isRelease) {
    // 添加 com.sensorsdata.analytics.android 插件
//    apply plugin: 'com.sensorsdata.analytics.android'

}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'



// ASM plugin test
apply plugin: 'com.test.asmplugin'

apply plugin: 'com.sensorsdata.analytics.android'

//apply plugin: 'com.growingio.android'
// FireBase
//apply plugin: 'com.google.gms.google-services'
//// Apply the Crashlytics Gradle plugin
//apply plugin: 'com.google.firebase.crashlytics'


//if(rootProject.ext.isRelease) {
//    sensorsAnalytics {
////    check {
////        //类名-方法名-方法描述，类的包名之间用/分割，（）里面是参数类型，Z是返回值类型
////        //methodCheckSet = ['android/text/TextUtils-isEmpty-(Ljava/lang/CharSequence;)Z']
////    }
////    //启用白名单模式
////    useInclude = true
////    include = ['cn.sa.demo']
//        //开启插件日志
//        debug = true
//        // 黑名单
//        // exclude = ['com.yanzhenjie.permission']
//    }
//}
android {

    try {
        compileSdkVersion rootProject.ext.compileSdkVersion
    } catch (Exception e) {
        compileSdkVersion 29
    }


    signingConfigs {
        config {
            keyAlias 'yang'
            keyPassword '123456'
            storeFile file('../sign.jks')
            storePassword '123456'
        }
    }
    defaultConfig {
        applicationId "cn.sa.demo"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //gio
        resValue("string", "growingio_project_id", "ad8d6a344dbae02f")
        resValue("string", "growingio_url_scheme", "growing.6b64332caad4ecfe")

        // Enabling multidex support.
        multiDexEnabled true
        multiDexKeepProguard file('multidexKeep.pro')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //databinding
    dataBinding {
        enabled = true
    }
    buildTypes {

        debug {
            // 定义 applicationId 后缀
            // applicationIdSuffix ".staging"
        }
        // copy debug 中的属性
        huawei.initWith(buildTypes.debug)
        huawei {

        }
        release {
            // 可定义一些常量
            buildConfigField "String", "API_URL", "\"http://test.example.com/api\""
            buildConfigField "boolean", "LOG_HTTP_CALLS", "true"

            // 定义 resources
            resValue "string", "app_name2", "Example"

            signingConfig signingConfigs.config
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    //添加 Sensors Analytics SDK 依赖
    implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:4.0.0'
//    implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:3.2.11'

//    implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK-pre:3.2.4-pre'
    //api(name: 'SensorsAnalyticsSDK-3.2.99', ext: 'aar')
    //api(name: 'RiskControlSDK', ext:'aar')

    // butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    // rxbinding
    implementation 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //gio
    //compile 'com.growingio.android:vds-android-agent:1.1.9@aar'
    //GrowingIO 无埋点 SDK
    implementation 'com.growingio.android:vds-android-agent:autotrack-2.7.6@aar'
    //debug-db
    debugImplementation('com.amitshekhar.android:debug-db:1.0.3') {
        exclude group: 'com.android.support'
    }
    //pinyin4j 2.5.0 有问题，2.5.1 可以
    //implementation 'com.belerweb:pinyin4j:2.5.0'

    //RxTool 基础工具库
    implementation "com.github.tamsiree.RxTool:RxKit:2.3.9"
    //RxTool UI库
    implementation "com.github.tamsiree.RxTool:RxUI:2.3.9"
    //RxTool 相机库
    implementation "com.github.tamsiree.RxTool:RxCamera:2.3.9"
    //Zxing核心包
    implementation 'com.google.zxing:core:3.3.0'
    //RxTool 功能库（Zxing扫描与生成二维码条形码 支付宝 微信）
    implementation "com.github.tamsiree.RxTool:RxFeature:2.3.9"

    // xposed
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'

    // FireBase
    implementation 'com.google.firebase:firebase-analytics:17.2.3'
    // Add the Firebase SDK for Crashlytics.
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta01'
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

// 判断 buildType
android.variantFilter { variant ->
    if (variant.buildType.name.equals('debug')) {
        println '---------- buildType  debug ---------'
    }
}

task yang {
    dependsOn "preBuild"
    doFirst {
        println '-------------------------------------------------doFirst---------'
        exec {
            executable = 'adb'
            args = ['shell', 'am', 'start', '-n',
                    "${android.defaultConfig.applicationId}/.MainActivity"]
        }
    }
}

// 在分析完成 gradle 之后执行
afterEvaluate { Project project ->
    project.tasks.names.each { taskName ->
//        println '--------- app ----------' + taskName
    }

}

task getReleasePassword {
    doFirst {
        def password = ''
        if (rootProject.file('private.properties').exists()) {
            Properties properties = new Properties();
            properties.load(rootProject.file
            ('private.properties').newDataInputStream())
            password = properties.getProperty('release.password')
        }
        if (!password?.trim()) {
           def  chars = System.console()?.readPassword("\nWhat's the secret password? ")
            password = new String(chars?chars:"nnnnn")
        }
        println '--------- password ---------->' + password
    }
}

//we need to make sure it is executed when performing a release build.
tasks.whenTaskAdded { theTask ->
    if (theTask.name == "packageRelease") {
        // packageRelease task 之前执行 getReleasePassword task
        theTask.dependsOn "getReleasePassword"
    }

}


class MyPlugin implements Plugin<Project> {

    void apply(Project project) {
        println '--------- MyPlugin ---------->'
    }
}

apply plugin: MyPlugin